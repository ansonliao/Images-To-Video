package com.ansonliao.github;

import org.jcodec.api.awt.AWTSequenceEncoder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.stream.Stream;

import static com.ansonliao.github.utils.ExceptionUtils.checkDirectoryExistedOrNot;
import static com.ansonliao.github.utils.ExceptionUtils.checkFileExistedOrNot;
import static com.ansonliao.github.utils.ImageUtils.isSupportedImageFormat;
import static java.util.stream.Collectors.toCollection;

public class ImagesToMovie {
    private static final Logger logger = LoggerFactory.getLogger(ImagesToMovie.class);

    public void createVideo(String imageDir, boolean isReversed, String videoLink) throws IOException {
        Stream<String> streamImages = getImages(imageDir).parallelStream().map(File::getAbsolutePath);
        ArrayList<String> images = isReversed ? streamImages.sorted(Comparator.reverseOrder()).collect(toCollection(ArrayList::new)) : streamImages.sorted().collect(toCollection(ArrayList::new));
        logger.info("The video will be generated by the images from the directory: {}, video will be placed: {}", imageDir, videoLink);
        createVideo(images, videoLink);
    }

    public void createVideo(List<String> imageLinks, String videoLink) throws IOException {
        if (imageLinks == null || imageLinks.isEmpty()) {
            logger.info("No images provided to create video.");
            return;
        }

        logger.info("========== Generate Video From Images ==========");
        logger.info("Video fill will be generated: {}", videoLink);
        imageLinks.forEach(link -> logger.info("Image: {}", link));
        List<BufferedImage> bufferedImages = new ArrayList<>();
        for (String imageLink : imageLinks) {
            checkFileExistedOrNot(imageLink).throwMessage("Image file is not found, path: " + imageLink);
            bufferedImages.add(ImageIO.read(new File(imageLink)));
        }
        Path videoPath = Paths.get(videoLink).getParent();
        if (!Files.exists(videoPath)) {
            Files.createDirectory(videoPath);
        }

        AWTSequenceEncoder encoder = AWTSequenceEncoder.createSequenceEncoder(new File(videoLink), Configurations.getVideoConfigs().videoFps());
        for (BufferedImage bufferedImage : bufferedImages) {
            encoder.encodeImage(bufferedImage);
        }
        encoder.finish();

        logger.info("\nVideo has been generated at {}", videoLink);
        logger.info("================================================");
    }

    public List<File> getImages(String imageDir) throws IOException {
        checkDirectoryExistedOrNot(imageDir).throwMessage("The directory is not existed, path: " + imageDir);
        ArrayList<File> images = new ArrayList<>();
        File f = new File(imageDir);
        Arrays.stream(Objects.requireNonNull(f.listFiles())).filter(file -> isSupportedImageFormat(file.getName())).forEach(images::add);
        return images;
    }

}
